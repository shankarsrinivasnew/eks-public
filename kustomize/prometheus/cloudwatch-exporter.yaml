# image:
#   repository: prom/cloudwatch-exporter
#   tag: cloudwatch_exporter-0.8.0
#   pullPolicy: IfNotPresent

command:
  - 'java'
  - '-Dhttp.proxyHost=http://eu-west-2.proxy.aws.uk.tsb'
  - '-Dhttp.proxyPort=3128'
  - '-Dhttps.proxyHost=http://eu-west-2.proxy.aws.uk.tsb'
  - '-Dhttps.proxyPort=3128'
  - '-Dhttp.nonProxyHosts=localhost,127.0.0.1,169.254.169.254,10.0.0.0/8,172.20.0.0/16,.internal,.eu-west-2.elb.amazonaws.com,vault.service.consul,ssm.eu-west-2.amazonaws.com,ssmmessages.eu-west-2.amazonaws.com,ec2.eu-west-2.amazonaws.com,ec2messages.eu-west-2.amazonaws.com,s3.eu-west-2.amazonaws.com,autoscaling.eu-west-2.amazonaws.com,secretsmanager.eu-west-2.amazonaws.com,kms.eu-west-2.amazonaws.com,ecr.eu-west-2.amazonaws.com,.eks.amazonaws.com,.ecr.eu-west-2.amazonaws.com,.s3.eu-west-2.amazonaws.com,.cluster.local,.aws.uk.tsb'
  - '-jar'
  - '/cloudwatch_exporter.jar'
  - '9106'
  - '/config/config.yml'

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: false
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: prometheus-sa
#   # annotations:
#   # Will add the provided map to the annotations for the created serviceAccount
#   # e.g.
#   # annotations:
#   #   eks.amazonaws.com/role-arn: arn:aws:iam::045223552195:role/eks/prometheus-thanos-s3

aws:
  region: eu-west-2
  role: arn:aws:iam::045223552195:role/eks/prometheus-thanos-s3

  # secret:
  #   name: prometheus-cloudwatch-exporter-secret
  #   includesSessionToken: false

  # aws_access_key_id: 
  # aws_secret_access_key: 

# Configuration is rendered with `tpl` function, therefore you can use any Helm variables and/or templates here
config: |-
  region: eu-west-2
  period_seconds: 240
  metrics:
  - aws_namespace: AWS/ELB
    aws_metric_name: HealthyHostCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]
  - aws_namespace: AWS/ELB
    aws_metric_name: UnHealthyHostCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]
  - aws_namespace: AWS/ELB
    aws_metric_name: RequestCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Sum]
  - aws_namespace: AWS/ELB
    aws_metric_name: Latency
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]
  - aws_namespace: AWS/ELB
    aws_metric_name: SurgeQueueLength
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Maximum, Sum]
  - aws_namespace: AWS/ELB
    aws_metric_name: BackendConnectionErrors
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Sum]

prometheusRule:
  # Specifies whether a PrometheusRule should be created
  enabled: false
  # Set the namespace the PrometheusRule should be deployed
  # namespace: monitoring
  # Set labels for the PrometheusRule, use this to define your scrape label for Prometheus Operator
  # labels:
  # Example - note the Kubernetes convention of camelCase instead of Prometheus'
  # rules:
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 80%.
  #      expr: aws_ebs_burst_balance_average < 80
  #      for: 10m
  #      labels:
  #        severity: warning
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 50%.
  #      expr: aws_ebs_burst_balance_average < 50
  #      for: 10m
  #      labels:
  #        severity: warning
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 30%.
  #      expr: aws_ebs_burst_balance_average < 30
  #      for: 10m
  #      labels:
  #        severity: critical

securityContext:
  runAsUser: 65534  # run as nobody user instead of root
  fsGroup: 65534