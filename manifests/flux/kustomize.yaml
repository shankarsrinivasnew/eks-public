---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kustomize-plugins
  namespace: flux
data:
  AWSTransformer: |
    #!/bin/bash

    function increment_ipv4 {
      local ip_base=$1
      local incr_amount=$2
      local -a ip_components
      local ip_regex="([0-9]+).([0-9]+).([0-9]+).([0-9]+)"
      [[ $ip_base =~ $ip_regex ]]
      ip_components=("${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}" "${BASH_REMATCH[4]}")
      ip_dec=0
      local comp
      for comp in "${ip_components[@]}"; do
        ip_dec=$((ip_dec<<8))
        ip_dec=$((ip_dec + $comp))
      done

      ip_dec=$((ip_dec + $incr_amount))

      ip_components=()
      local i
      for ((i=0; i < 4; i++)); do
        comp=$((ip_dec & 0xFF))
        ip_components+=($comp)
        ip_dec=$((ip_dec>>8))
      done
      echo "${ip_components[3]}.${ip_components[2]}.${ip_components[1]}.${ip_components[0]}"
    }

    # Install utilities
    apk update > /dev/null
    apk add aws-cli jq > /dev/null

    # Ignore script name
    shift

    # Get AWS properties
    export AWS_DEFAULT_REGION=eu-west-2
    AWS_ACCOUNT=$(wget -O - -Y off http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.accountId')
    AWS_ENVIRONMENT=dev
    IAM_ADMIN_ROLE_NAME=tsb-aws-administrator
    GIT_BRANCH=dev
    DYNATRACE_ENV_ID=rxl69895
    DYNATRACE_HOST_GROUP=AWSS-EKSS-NOLAYER-NOLINE-DEV

    case $AWS_ACCOUNT in
      273312704578)
        AWS_ENVIRONMENT=nonprod
        IAM_ADMIN_ROLE_NAME=rl_tsbsme_non_prod_admin
        GIT_BRANCH=nonprod
        DYNATRACE_ENV_ID=rxl69895
        DYNATRACE_HOST_GROUP=AWSS-EKSS-NOLAYER-NOLINE-NONP
        ;;
      045223552195)
        AWS_ENVIRONMENT=preprod
        IAM_ADMIN_ROLE_NAME=rl_tsbsme_staging_admin
        GIT_BRANCH=preprod
        DYNATRACE_ENV_ID=rxl69895
        DYNATRACE_HOST_GROUP=AWSS-EKSS-NOLAYER-NOLINE-PRE
        ;;
      407929326957)
        AWS_ENVIRONMENT=prod
        IAM_ADMIN_ROLE_NAME=rl_tsbsme_prod_admin
        GIT_BRANCH=master
        DYNATRACE_ENV_ID=bqm47049
        DYNATRACE_HOST_GROUP=AWSS-EKSS-NOLAYER-NOLINE
        ;;
    esac

    CLUSTER_NAME="$AWS_ENVIRONMENT-eks"
    DNS_ZONE="$AWS_ENVIRONMENT.aws.uk.tsb"

    # Get VPC CIDR
    VPC=$(aws ec2 describe-vpcs --query "Vpcs[?Tags[?Key == 'Project' && Value == 'shared']]" | jq '.[0]')
    VPC_ID=$(echo $VPC | jq -r '.VpcId')
    VPC_CIDR=$(echo $VPC | jq -r '.CidrBlock')

    # Get subnet CIDRs
    SUBNETS=$(aws ec2 describe-subnets --query "Subnets[?VpcId == '$VPC_ID']" | jq)
    ACCESS_SUBNET_A_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "access" and .AvailabilityZone == "eu-west-2a").CidrBlock')
    ACCESS_SUBNET_B_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "access" and .AvailabilityZone == "eu-west-2b").CidrBlock')
    ACCESS_SUBNET_C_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "access" and .AvailabilityZone == "eu-west-2c").CidrBlock')
    DATA_SUBNET_A_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "data" and .AvailabilityZone == "eu-west-2a").CidrBlock')
    DATA_SUBNET_B_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "data" and .AvailabilityZone == "eu-west-2b").CidrBlock')
    DATA_SUBNET_C_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "data" and .AvailabilityZone == "eu-west-2c").CidrBlock')
    CORE_SUBNET_A_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "core" and .AvailabilityZone == "eu-west-2a").CidrBlock')
    CORE_SUBNET_B_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "core" and .AvailabilityZone == "eu-west-2b").CidrBlock')
    CORE_SUBNET_C_CIDR=$(echo $SUBNETS | jq -r '.[] | select(.Tags[].Key == "Layer" and .Tags[].Value == "core" and .AvailabilityZone == "eu-west-2c").CidrBlock')

    # Get DNS server
    IFS='/' read -ra VPC_NET <<< $VPC_CIDR
    DNS_SERVER=$(increment_ipv4 $VPC_NET[1] 2)

    # Get EFS file system ID
    EFS_ID=$(aws efs describe-file-systems --query "FileSystems[?Tags[?Key == 'Project' && Value == 'shared']] | @[?Tags[?Key == 'Purpose' && Value == 'EFSEKS']].FileSystemId" --output text)

    # Get access point IDs
    EFS_JENKINS_HOME_ID=$(aws efs describe-access-points --file-system-id $EFS_ID --query "AccessPoints[?Tags[?Key == 'Purpose' && Value == 'EFSEKSJenkinsHome']].AccessPointId" --output text)
    EFS_PROMETHEUS_ID=$(aws efs describe-access-points --file-system-id $EFS_ID --query "AccessPoints[?Tags[?Key == 'Purpose' && Value == 'EFSEKSPrometheus']].AccessPointId" --output text)
    EFS_THANOS_ID=$(aws efs describe-access-points --file-system-id $EFS_ID --query "AccessPoints[?Tags[?Key == 'Purpose' && Value == 'EFSEKSThanoscompact']].AccessPointId" --output text)

    # Get secrets
    SECRET=$(aws secretsmanager get-secret-value --secret-id eks-flux-kustomize | jq -r ".SecretString" )
    SECRET_RAX_PAGERDUTY_KEY=$(echo $SECRET | jq -r ".raxPagerDutyKey")

    # Get Shared MSK Cluster
    SHARED_MSK_CLUSTER_ARN=$(aws kafka list-clusters --query "ClusterInfoList[?Tags.project == 'MSK_AWS']" | jq -r ".[].ClusterArn")
    SHARED_MSK_CLUSTER=$(aws kafka list-nodes --cluster-arn $SHARED_MSK_CLUSTER_ARN | jq )
    SHARED_MSK_BROKER_0=$(echo $SHARED_MSK_CLUSTER | jq -r ".NodeInfoList[0].BrokerNodeInfo.Endpoints[]")
    SHARED_MSK_BROKER_1=$(echo $SHARED_MSK_CLUSTER | jq -r ".NodeInfoList[1].BrokerNodeInfo.Endpoints[]")
    SHARED_MSK_BROKER_2=$(echo $SHARED_MSK_CLUSTER | jq -r ".NodeInfoList[2].BrokerNodeInfo.Endpoints[]")

    # Get BDS MSK Cluster
    BDS_MSK_CLUSTER_ARN=$(aws kafka list-clusters --query "ClusterInfoList[?Tags.project == 'TSB-BDS-ODS-KAFKA']" | jq -r ".[].ClusterArn")
    BDS_MSK_CLUSTER=$(aws kafka list-nodes --cluster-arn $BDS_MSK_CLUSTER_ARN | jq )
    BDS_MSK_BROKER_0=$(echo $BDS_MSK_CLUSTER | jq -r ".NodeInfoList[0].BrokerNodeInfo.Endpoints[]")
    BDS_MSK_BROKER_1=$(echo $BDS_MSK_CLUSTER | jq -r ".NodeInfoList[1].BrokerNodeInfo.Endpoints[]")
    BDS_MSK_BROKER_2=$(echo $BDS_MSK_CLUSTER | jq -r ".NodeInfoList[2].BrokerNodeInfo.Endpoints[]")

    # Update manifest
    sed "s~{{ AWS_ACCOUNT }}~$AWS_ACCOUNT~g;s~{{ AWS_ENVIRONMENT }}~$AWS_ENVIRONMENT~g;s~{{ DNS_ZONE }}~$DNS_ZONE~g;s~{{ IAM_ADMIN_ROLE_NAME }}~$IAM_ADMIN_ROLE_NAME~g;s~{{ GIT_BRANCH }}~$GIT_BRANCH~g;s~{{ CLUSTER_NAME }}~$CLUSTER_NAME~g;s~{{ VPC_CIDR }}~$VPC_CIDR~g;s~{{ ACCESS_SUBNET_A_CIDR }}~$ACCESS_SUBNET_A_CIDR~g;s~{{ ACCESS_SUBNET_B_CIDR }}~$ACCESS_SUBNET_B_CIDR~g;s~{{ ACCESS_SUBNET_C_CIDR }}~$ACCESS_SUBNET_C_CIDR~g;s~{{ DATA_SUBNET_A_CIDR }}~$DATA_SUBNET_A_CIDR~g;s~{{ DATA_SUBNET_B_CIDR }}~$DATA_SUBNET_B_CIDR~g;s~{{ DATA_SUBNET_C_CIDR }}~$DATA_SUBNET_C_CIDR~g;s~{{ CORE_SUBNET_A_CIDR }}~$CORE_SUBNET_A_CIDR~g;s~{{ CORE_SUBNET_B_CIDR }}~$CORE_SUBNET_B_CIDR~g;s~{{ CORE_SUBNET_C_CIDR }}~$CORE_SUBNET_C_CIDR~g;s~{{ DNS_SERVER }}~$DNS_SERVER~g;s~{{ EFS_ID }}~$EFS_ID~g;s~{{ EFS_JENKINS_HOME_ID }}~$EFS_JENKINS_HOME_ID~g;s~{{ EFS_PROMETHEUS_ID }}~$EFS_PROMETHEUS_ID~g;s~{{ EFS_THANOS_ID }}~$EFS_THANOS_ID~g;s~{{ SECRET_RAX_PAGERDUTY_KEY }}~$SECRET_RAX_PAGERDUTY_KEY~g;s~{{ DYNATRACE_ENV_ID }}~$DYNATRACE_ENV_ID~g;s~{{ DYNATRACE_HOST_GROUP }}~$DYNATRACE_HOST_GROUP~g;s~{{ SHARED_MSK_BROKER_0 }}~$SHARED_MSK_BROKER_0~g;s~{{ SHARED_MSK_BROKER_1 }}~$SHARED_MSK_BROKER_1~g;s~{{ SHARED_MSK_BROKER_2 }}~$SHARED_MSK_BROKER_2~g;s~{{ BDS_MSK_BROKER_0 }}~$BDS_MSK_BROKER_0~g;s~{{ BDS_MSK_BROKER_1 }}~$BDS_MSK_BROKER_1~g;s~{{ BDS_MSK_BROKER_2 }}~$BDS_MSK_BROKER_2~g" $1
